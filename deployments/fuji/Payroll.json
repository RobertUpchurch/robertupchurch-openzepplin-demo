{
  "address": "0x027cA576BE7947eb02964B56dBCA17e2320dAe0b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_axiatokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddEmployee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "employee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Payment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EMPLOYEE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_employee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_hourlyRate",
          "type": "uint256"
        }
      ],
      "name": "addEmployee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hours",
          "type": "uint256"
        }
      ],
      "name": "addTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approvePay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "employeeApprovedPay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "employeeHourlyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "employeePendingPay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_employee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_hours",
          "type": "uint256"
        }
      ],
      "name": "removeTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9d59fdba53687dc1666a5dd37bf0d83b8f50030b99dcef652bf0c6a9c517ce86",
  "receipt": {
    "to": null,
    "from": "0x6CbD5DdCDFf77B69B6BF38202e58ACD68F546370",
    "contractAddress": "0x027cA576BE7947eb02964B56dBCA17e2320dAe0b",
    "transactionIndex": 0,
    "gasUsed": "1608570",
    "logsBloom": "0x
    "blockHash": "0xa80d746cec0eaf7ba0e730bdea97ae9bd873f1e2c9e4277ab88950b1dd4d839e",
    "transactionHash": "0x9d59fdba53687dc1666a5dd37bf0d83b8f50030b99dcef652bf0c6a9c517ce86",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3524088,
        "transactionHash": "0x9d59fdba53687dc1666a5dd37bf0d83b8f50030b99dcef652bf0c6a9c517ce86",
        "address": "0x027cA576BE7947eb02964B56dBCA17e2320dAe0b",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006cbd5ddcdff77b69b6bf38202e58acd68f546370",
          "0x0000000000000000000000006cbd5ddcdff77b69b6bf38202e58acd68f546370"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa80d746cec0eaf7ba0e730bdea97ae9bd873f1e2c9e4277ab88950b1dd4d839e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3524088,
        "transactionHash": "0x9d59fdba53687dc1666a5dd37bf0d83b8f50030b99dcef652bf0c6a9c517ce86",
        "address": "0x027cA576BE7947eb02964B56dBCA17e2320dAe0b",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x989b8681e34e5a140922589c8eca8a05e6973c253a67caab2922847f87aa8bde",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xfd70517941c75212b0f9013e45c47a37d6d983c5304288c7af285f2ea40cbba7"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa80d746cec0eaf7ba0e730bdea97ae9bd873f1e2c9e4277ab88950b1dd4d839e"
      }
    ],
    "blockNumber": 3524088,
    "cumulativeGasUsed": "1608570",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5E95f9DE4C062e5D8839ad4789962f488429cf93"
  ],
  "solcInputHash": "6e7d66cf915a8ad6ce3709f791f50a7c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_axiatokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddEmployee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"employee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMPLOYEE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_employee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hourlyRate\",\"type\":\"uint256\"}],\"name\":\"addEmployee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hours\",\"type\":\"uint256\"}],\"name\":\"addTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approvePay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"employeeApprovedPay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"employeeHourlyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"employeePendingPay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_employee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hours\",\"type\":\"uint256\"}],\"name\":\"removeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Payroll/Payroll.sol\":\"Payroll\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe5f33b553368181a44ff0c77942ed831152bfa731bc4d1c12a363ef6918366b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x693d1a6333975d5bd166fcc844874f96affecbf45dc5c34fa7d172248d74c06b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5fa25f305839292fab713256214f2868e0257d29826b14282bbd7f1e34f5af38\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x905cd0ecd91d1de79a4679d745b79cf852ca8ccda5d25d1c49c6bd17a5edc0cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6aa521718bf139b44ce56f194f6aea1d590cacef995b5a84703fb1579fa49be9\",\"license\":\"MIT\"},\"contracts/Payroll/Payroll.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract Payroll is AccessControl {\\n\\n  // ROLES - \\n  bytes32 public constant HR_ROLE = keccak256(\\\"HR_ROLE\\\");\\n  bytes32 public constant MANAGER = keccak256(\\\"MANAGER\\\");\\n  bytes32 public constant EMPLOYEE = keccak256(\\\"EMPLOYEE\\\");\\n\\n  // STATE\\n  IERC20 axiaToken;\\n  mapping(address => uint256) public employeeHourlyRate;\\n  mapping(address => uint256) public employeeApprovedPay;\\n  mapping(address => uint256) public employeePendingPay;\\n\\n  // EVENTS\\n  event Payment(address employee, uint256 amount);\\n  event AddEmployee(address account);\\n\\n  constructor(address _axiatokenAddress){\\n    axiaToken = IERC20(_axiatokenAddress);\\n\\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    _setRoleAdmin(EMPLOYEE, HR_ROLE);\\n  }\\n\\n  function addEmployee(address _employee, uint256 _hourlyRate) public onlyRole(HR_ROLE) {\\n    employeeHourlyRate[_employee] = _hourlyRate;\\n    grantRole(EMPLOYEE, _employee);\\n    emit AddEmployee(_employee);\\n  }\\n\\n  function claim() public onlyRole(EMPLOYEE) {\\n    axiaToken.transfer(msg.sender, employeeApprovedPay[msg.sender]);\\n    emit Payment(msg.sender, employeeApprovedPay[msg.sender]);\\n    employeeApprovedPay[msg.sender] = 0;\\n  }\\n\\n  function addTime(uint _hours) public onlyRole(EMPLOYEE) {\\n    employeePendingPay[msg.sender] += (_hours * employeeHourlyRate[msg.sender]);\\n  }\\n\\n  function approvePay(address _account, uint _amount) public onlyRole(MANAGER) {\\n    require(_amount <= employeePendingPay[_account], \\\"approval too high\\\");\\n    employeePendingPay[_account] -= _amount;\\n    employeeApprovedPay[_account] += _amount;\\n  }\\n\\n  function removeTime(address _employee, uint _hours) public {\\n    require(\\n      (hasRole(EMPLOYEE, msg.sender) && msg.sender == _employee) \\n      || hasRole(HR_ROLE, msg.sender), \\n      \\\"Access Control: insufficient role permissions\\\"\\n    );\\n    employeePendingPay[_employee] -= (_hours * employeeHourlyRate[_employee]);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xfe5ef7dd4cf2ba11d4746bd7a0a9b457ca05feacaf69e976dbc6e2549c245e69\",\"license\":\"Unlicensed\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001e2b38038062001e2b8339818101604052810190620000379190620002e2565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200008d6000801b33620000e660201b60201c565b620000df7f989b8681e34e5a140922589c8eca8a05e6973c253a67caab2922847f87aa8bde7ffd70517941c75212b0f9013e45c47a37d6d983c5304288c7af285f2ea40cbba7620001d760201b60201c565b5062000367565b620000f882826200023a60201b60201c565b620001d357600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000178620002a460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000620001ea83620002ac60201b60201c565b905081600080858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b6000806000838152602001908152602001600020600101549050919050565b600081519050620002dc816200034d565b92915050565b600060208284031215620002fb57620002fa62000348565b5b60006200030b84828501620002cb565b91505092915050565b6000620003218262000328565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b620003588162000314565b81146200036457600080fd5b50565b611ab480620003776000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638ce066bb116100a2578063d547741f11610071578063d547741f146102f1578063e7336d141461030d578063e7fd9a131461032b578063f3c6a19814610347578063feeef7561461036557610116565b80638ce066bb1461025757806391d1485414610287578063a217fddf146102b7578063ca0f3816146102d557610116565b80632f2ff15d116100e95780632f2ff15d146101b557806333504b5c146101d157806336568abe146102015780634e71d92d1461021d578063675bb51d1461022757610116565b806301ffc9a71461011b5780630502ca6b1461014b5780631b2df85014610167578063248a9ca314610185575b600080fd5b610135600480360381019061013091906112fd565b610381565b604051610142919061154d565b60405180910390f35b6101656004803603810190610160919061132a565b6103fb565b005b61016f6104d1565b60405161017c9190611568565b60405180910390f35b61019f600480360381019061019a9190611290565b6104f5565b6040516101ac9190611568565b60405180910390f35b6101cf60048036038101906101ca91906112bd565b610514565b005b6101eb60048036038101906101e691906111f6565b61053d565b6040516101f89190611625565b60405180910390f35b61021b600480360381019061021691906112bd565b610555565b005b6102256105d8565b005b610241600480360381019061023c91906111f6565b6107b9565b60405161024e9190611625565b60405180910390f35b610271600480360381019061026c91906111f6565b6107d1565b60405161027e9190611625565b60405180910390f35b6102a1600480360381019061029c91906112bd565b6107e9565b6040516102ae919061154d565b60405180910390f35b6102bf610853565b6040516102cc9190611568565b60405180910390f35b6102ef60048036038101906102ea9190611223565b61085a565b005b61030b600480360381019061030691906112bd565b6109cf565b005b6103156109f8565b6040516103229190611568565b60405180910390f35b61034560048036038101906103409190611223565b610a1c565b005b61034f610af8565b60405161035c9190611568565b60405180910390f35b61037f600480360381019061037a9190611223565b610b1c565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103f457506103f382610c81565b5b9050919050565b7f989b8681e34e5a140922589c8eca8a05e6973c253a67caab2922847f87aa8bde61042d81610428610ceb565b610cf3565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261047891906116bd565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104c69190611667565b925050819055505050565b7faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c81565b6000806000838152602001908152602001600020600101549050919050565b61051d826104f5565b61052e81610529610ceb565b610cf3565b6105388383610d90565b505050565b60026020528060005260406000206000915090505481565b61055d610ceb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c190611605565b60405180910390fd5b6105d48282610e70565b5050565b7f989b8681e34e5a140922589c8eca8a05e6973c253a67caab2922847f87aa8bde61060a81610605610ceb565b610cf3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff1660e01b81526004016106a6929190611524565b602060405180830381600087803b1580156106c057600080fd5b505af11580156106d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f89190611263565b507fd4f43975feb89f48dd30cabbb32011045be187d1e11c8ea9faa43efc3528251933600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051610769929190611524565b60405180910390a16000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60046020528060005260406000206000915090505481565b60036020528060005260406000206000915090505481565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b6108847f989b8681e34e5a140922589c8eca8a05e6973c253a67caab2922847f87aa8bde336107e9565b80156108bb57508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806108ec57506108eb7ffd70517941c75212b0f9013e45c47a37d6d983c5304288c7af285f2ea40cbba7336107e9565b5b61092b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610922906115c5565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548161097691906116bd565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109c49190611717565b925050819055505050565b6109d8826104f5565b6109e9816109e4610ceb565b610cf3565b6109f38383610e70565b505050565b7f989b8681e34e5a140922589c8eca8a05e6973c253a67caab2922847f87aa8bde81565b7ffd70517941c75212b0f9013e45c47a37d6d983c5304288c7af285f2ea40cbba7610a4e81610a49610ceb565b610cf3565b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610abc7f989b8681e34e5a140922589c8eca8a05e6973c253a67caab2922847f87aa8bde84610514565b7f781b18cb87f69da304aa6a3ffdd3af7b95e6a6f8d000e3abb3dfde21cbe5810383604051610aeb9190611509565b60405180910390a1505050565b7ffd70517941c75212b0f9013e45c47a37d6d983c5304288c7af285f2ea40cbba781565b7faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c610b4e81610b49610ceb565b610cf3565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610bd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc7906115e5565b60405180910390fd5b81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c1f9190611717565b9250508190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c759190611667565b92505081905550505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b610cfd82826107e9565b610d8c57610d228173ffffffffffffffffffffffffffffffffffffffff166014610f51565b610d308360001c6020610f51565b604051602001610d419291906114cf565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d839190611583565b60405180910390fd5b5050565b610d9a82826107e9565b610e6c57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610e11610ceb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b610e7a82826107e9565b15610f4d57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610ef2610ceb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b606060006002836002610f6491906116bd565b610f6e9190611667565b67ffffffffffffffff811115610f8757610f86611884565b5b6040519080825280601f01601f191660200182016040528015610fb95781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610ff157610ff0611855565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061105557611054611855565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261109591906116bd565b61109f9190611667565b90505b600181111561113f577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106110e1576110e0611855565b5b1a60f81b8282815181106110f8576110f7611855565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611138906117fc565b90506110a2565b5060008414611183576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117a906115a5565b60405180910390fd5b8091505092915050565b60008135905061119c81611a0b565b92915050565b6000815190506111b181611a22565b92915050565b6000813590506111c681611a39565b92915050565b6000813590506111db81611a50565b92915050565b6000813590506111f081611a67565b92915050565b60006020828403121561120c5761120b6118b3565b5b600061121a8482850161118d565b91505092915050565b6000806040838503121561123a576112396118b3565b5b60006112488582860161118d565b9250506020611259858286016111e1565b9150509250929050565b600060208284031215611279576112786118b3565b5b6000611287848285016111a2565b91505092915050565b6000602082840312156112a6576112a56118b3565b5b60006112b4848285016111b7565b91505092915050565b600080604083850312156112d4576112d36118b3565b5b60006112e2858286016111b7565b92505060206112f38582860161118d565b9150509250929050565b600060208284031215611313576113126118b3565b5b6000611321848285016111cc565b91505092915050565b6000602082840312156113405761133f6118b3565b5b600061134e848285016111e1565b91505092915050565b6113608161174b565b82525050565b61136f8161175d565b82525050565b61137e81611769565b82525050565b600061138f82611640565b611399818561164b565b93506113a98185602086016117c9565b6113b2816118b8565b840191505092915050565b60006113c882611640565b6113d2818561165c565b93506113e28185602086016117c9565b80840191505092915050565b60006113fb60208361164b565b9150611406826118c9565b602082019050919050565b600061141e602d8361164b565b9150611429826118f2565b604082019050919050565b600061144160118361164b565b915061144c82611941565b602082019050919050565b600061146460178361165c565b915061146f8261196a565b601782019050919050565b600061148760118361165c565b915061149282611993565b601182019050919050565b60006114aa602f8361164b565b91506114b5826119bc565b604082019050919050565b6114c9816117bf565b82525050565b60006114da82611457565b91506114e682856113bd565b91506114f18261147a565b91506114fd82846113bd565b91508190509392505050565b600060208201905061151e6000830184611357565b92915050565b60006040820190506115396000830185611357565b61154660208301846114c0565b9392505050565b60006020820190506115626000830184611366565b92915050565b600060208201905061157d6000830184611375565b92915050565b6000602082019050818103600083015261159d8184611384565b905092915050565b600060208201905081810360008301526115be816113ee565b9050919050565b600060208201905081810360008301526115de81611411565b9050919050565b600060208201905081810360008301526115fe81611434565b9050919050565b6000602082019050818103600083015261161e8161149d565b9050919050565b600060208201905061163a60008301846114c0565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000611672826117bf565b915061167d836117bf565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156116b2576116b1611826565b5b828201905092915050565b60006116c8826117bf565b91506116d3836117bf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561170c5761170b611826565b5b828202905092915050565b6000611722826117bf565b915061172d836117bf565b9250828210156117405761173f611826565b5b828203905092915050565b60006117568261179f565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156117e75780820151818401526020810190506117cc565b838111156117f6576000848401525b50505050565b6000611807826117bf565b9150600082141561181b5761181a611826565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f41636365737320436f6e74726f6c3a20696e73756666696369656e7420726f6c60008201527f65207065726d697373696f6e7300000000000000000000000000000000000000602082015250565b7f617070726f76616c20746f6f2068696768000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b611a148161174b565b8114611a1f57600080fd5b50565b611a2b8161175d565b8114611a3657600080fd5b50565b611a4281611769565b8114611a4d57600080fd5b50565b611a5981611773565b8114611a6457600080fd5b50565b611a70816117bf565b8114611a7b57600080fd5b5056fea264697066735822122021c472526c4e6258575eb17a7076d30a4f10433a7108d350db38a53fac6fba4864736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638ce066bb116100a2578063d547741f11610071578063d547741f146102f1578063e7336d141461030d578063e7fd9a131461032b578063f3c6a19814610347578063feeef7561461036557610116565b80638ce066bb1461025757806391d1485414610287578063a217fddf146102b7578063ca0f3816146102d557610116565b80632f2ff15d116100e95780632f2ff15d146101b557806333504b5c146101d157806336568abe146102015780634e71d92d1461021d578063675bb51d1461022757610116565b806301ffc9a71461011b5780630502ca6b1461014b5780631b2df85014610167578063248a9ca314610185575b600080fd5b610135600480360381019061013091906112fd565b610381565b604051610142919061154d565b60405180910390f35b6101656004803603810190610160919061132a565b6103fb565b005b61016f6104d1565b60405161017c9190611568565b60405180910390f35b61019f600480360381019061019a9190611290565b6104f5565b6040516101ac9190611568565b60405180910390f35b6101cf60048036038101906101ca91906112bd565b610514565b005b6101eb60048036038101906101e691906111f6565b61053d565b6040516101f89190611625565b60405180910390f35b61021b600480360381019061021691906112bd565b610555565b005b6102256105d8565b005b610241600480360381019061023c91906111f6565b6107b9565b60405161024e9190611625565b60405180910390f35b610271600480360381019061026c91906111f6565b6107d1565b60405161027e9190611625565b60405180910390f35b6102a1600480360381019061029c91906112bd565b6107e9565b6040516102ae919061154d565b60405180910390f35b6102bf610853565b6040516102cc9190611568565b60405180910390f35b6102ef60048036038101906102ea9190611223565b61085a565b005b61030b600480360381019061030691906112bd565b6109cf565b005b6103156109f8565b6040516103229190611568565b60405180910390f35b61034560048036038101906103409190611223565b610a1c565b005b61034f610af8565b60405161035c9190611568565b60405180910390f35b61037f600480360381019061037a9190611223565b610b1c565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103f457506103f382610c81565b5b9050919050565b7f989b8681e34e5a140922589c8eca8a05e6973c253a67caab2922847f87aa8bde61042d81610428610ceb565b610cf3565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261047891906116bd565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104c69190611667565b925050819055505050565b7faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c81565b6000806000838152602001908152602001600020600101549050919050565b61051d826104f5565b61052e81610529610ceb565b610cf3565b6105388383610d90565b505050565b60026020528060005260406000206000915090505481565b61055d610ceb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c190611605565b60405180910390fd5b6105d48282610e70565b5050565b7f989b8681e34e5a140922589c8eca8a05e6973c253a67caab2922847f87aa8bde61060a81610605610ceb565b610cf3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff1660e01b81526004016106a6929190611524565b602060405180830381600087803b1580156106c057600080fd5b505af11580156106d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f89190611263565b507fd4f43975feb89f48dd30cabbb32011045be187d1e11c8ea9faa43efc3528251933600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051610769929190611524565b60405180910390a16000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60046020528060005260406000206000915090505481565b60036020528060005260406000206000915090505481565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b6108847f989b8681e34e5a140922589c8eca8a05e6973c253a67caab2922847f87aa8bde336107e9565b80156108bb57508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806108ec57506108eb7ffd70517941c75212b0f9013e45c47a37d6d983c5304288c7af285f2ea40cbba7336107e9565b5b61092b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610922906115c5565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548161097691906116bd565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109c49190611717565b925050819055505050565b6109d8826104f5565b6109e9816109e4610ceb565b610cf3565b6109f38383610e70565b505050565b7f989b8681e34e5a140922589c8eca8a05e6973c253a67caab2922847f87aa8bde81565b7ffd70517941c75212b0f9013e45c47a37d6d983c5304288c7af285f2ea40cbba7610a4e81610a49610ceb565b610cf3565b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610abc7f989b8681e34e5a140922589c8eca8a05e6973c253a67caab2922847f87aa8bde84610514565b7f781b18cb87f69da304aa6a3ffdd3af7b95e6a6f8d000e3abb3dfde21cbe5810383604051610aeb9190611509565b60405180910390a1505050565b7ffd70517941c75212b0f9013e45c47a37d6d983c5304288c7af285f2ea40cbba781565b7faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c610b4e81610b49610ceb565b610cf3565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610bd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc7906115e5565b60405180910390fd5b81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c1f9190611717565b9250508190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c759190611667565b92505081905550505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b610cfd82826107e9565b610d8c57610d228173ffffffffffffffffffffffffffffffffffffffff166014610f51565b610d308360001c6020610f51565b604051602001610d419291906114cf565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d839190611583565b60405180910390fd5b5050565b610d9a82826107e9565b610e6c57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610e11610ceb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b610e7a82826107e9565b15610f4d57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610ef2610ceb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b606060006002836002610f6491906116bd565b610f6e9190611667565b67ffffffffffffffff811115610f8757610f86611884565b5b6040519080825280601f01601f191660200182016040528015610fb95781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610ff157610ff0611855565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061105557611054611855565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261109591906116bd565b61109f9190611667565b90505b600181111561113f577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106110e1576110e0611855565b5b1a60f81b8282815181106110f8576110f7611855565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611138906117fc565b90506110a2565b5060008414611183576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117a906115a5565b60405180910390fd5b8091505092915050565b60008135905061119c81611a0b565b92915050565b6000815190506111b181611a22565b92915050565b6000813590506111c681611a39565b92915050565b6000813590506111db81611a50565b92915050565b6000813590506111f081611a67565b92915050565b60006020828403121561120c5761120b6118b3565b5b600061121a8482850161118d565b91505092915050565b6000806040838503121561123a576112396118b3565b5b60006112488582860161118d565b9250506020611259858286016111e1565b9150509250929050565b600060208284031215611279576112786118b3565b5b6000611287848285016111a2565b91505092915050565b6000602082840312156112a6576112a56118b3565b5b60006112b4848285016111b7565b91505092915050565b600080604083850312156112d4576112d36118b3565b5b60006112e2858286016111b7565b92505060206112f38582860161118d565b9150509250929050565b600060208284031215611313576113126118b3565b5b6000611321848285016111cc565b91505092915050565b6000602082840312156113405761133f6118b3565b5b600061134e848285016111e1565b91505092915050565b6113608161174b565b82525050565b61136f8161175d565b82525050565b61137e81611769565b82525050565b600061138f82611640565b611399818561164b565b93506113a98185602086016117c9565b6113b2816118b8565b840191505092915050565b60006113c882611640565b6113d2818561165c565b93506113e28185602086016117c9565b80840191505092915050565b60006113fb60208361164b565b9150611406826118c9565b602082019050919050565b600061141e602d8361164b565b9150611429826118f2565b604082019050919050565b600061144160118361164b565b915061144c82611941565b602082019050919050565b600061146460178361165c565b915061146f8261196a565b601782019050919050565b600061148760118361165c565b915061149282611993565b601182019050919050565b60006114aa602f8361164b565b91506114b5826119bc565b604082019050919050565b6114c9816117bf565b82525050565b60006114da82611457565b91506114e682856113bd565b91506114f18261147a565b91506114fd82846113bd565b91508190509392505050565b600060208201905061151e6000830184611357565b92915050565b60006040820190506115396000830185611357565b61154660208301846114c0565b9392505050565b60006020820190506115626000830184611366565b92915050565b600060208201905061157d6000830184611375565b92915050565b6000602082019050818103600083015261159d8184611384565b905092915050565b600060208201905081810360008301526115be816113ee565b9050919050565b600060208201905081810360008301526115de81611411565b9050919050565b600060208201905081810360008301526115fe81611434565b9050919050565b6000602082019050818103600083015261161e8161149d565b9050919050565b600060208201905061163a60008301846114c0565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000611672826117bf565b915061167d836117bf565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156116b2576116b1611826565b5b828201905092915050565b60006116c8826117bf565b91506116d3836117bf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561170c5761170b611826565b5b828202905092915050565b6000611722826117bf565b915061172d836117bf565b9250828210156117405761173f611826565b5b828203905092915050565b60006117568261179f565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156117e75780820151818401526020810190506117cc565b838111156117f6576000848401525b50505050565b6000611807826117bf565b9150600082141561181b5761181a611826565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f41636365737320436f6e74726f6c3a20696e73756666696369656e7420726f6c60008201527f65207065726d697373696f6e7300000000000000000000000000000000000000602082015250565b7f617070726f76616c20746f6f2068696768000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b611a148161174b565b8114611a1f57600080fd5b50565b611a2b8161175d565b8114611a3657600080fd5b50565b611a4281611769565b8114611a4d57600080fd5b50565b611a5981611773565b8114611a6457600080fd5b50565b611a70816117bf565b8114611a7b57600080fd5b5056fea264697066735822122021c472526c4e6258575eb17a7076d30a4f10433a7108d350db38a53fac6fba4864736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/Payroll/Payroll.sol:Payroll",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 744,
        "contract": "contracts/Payroll/Payroll.sol:Payroll",
        "label": "axiaToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)459"
      },
      {
        "astId": 748,
        "contract": "contracts/Payroll/Payroll.sol:Payroll",
        "label": "employeeHourlyRate",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 752,
        "contract": "contracts/Payroll/Payroll.sol:Payroll",
        "label": "employeeApprovedPay",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 756,
        "contract": "contracts/Payroll/Payroll.sol:Payroll",
        "label": "employeePendingPay",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)459": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/Payroll/Payroll.sol:Payroll",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/Payroll/Payroll.sol:Payroll",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}